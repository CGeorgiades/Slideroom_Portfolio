; ModuleID = 'outp.ll_.opt.bc'
source_filename = "Module"

%Pair = type { i1, i32 }

@str = private unnamed_addr constant [7 x i8] c"  .   \00", align 1

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #0

; Function Attrs: nofree norecurse nounwind
define double @abs(double* nocapture readonly %x) local_unnamed_addr #1 {
entry:
  %x.val = load double, double* %x, align 8
  %0 = fcmp olt double %x.val, 0.000000e+00
  %1 = uitofp i1 %0 to double
  %2 = fmul double %x.val, %1
  %3 = fmul double %2, 2.000000e+00
  %4 = fsub double %x.val, %3
  ret double %4
}

; Function Attrs: nofree norecurse nounwind
define void @Pair(%Pair** nocapture readonly %this, i1* nocapture readonly %a, i32* nocapture readonly %b) local_unnamed_addr #1 {
entry:
  %0 = load %Pair*, %Pair** %this, align 8
  %1 = getelementptr %Pair, %Pair* %0, i64 0, i32 0
  %2 = getelementptr %Pair, %Pair* %0, i64 0, i32 1
  %3 = load i1, i1* %a, align 1
  store i1 %3, i1* %1, align 1
  %4 = load i32, i32* %b, align 4
  store i32 %4, i32* %2, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone
define void @Pair.18(%Pair** nocapture %this) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: norecurse nounwind readonly
define i32 @floor(double* nocapture readonly %x) local_unnamed_addr #3 {
entry:
  %x.val = load double, double* %x, align 8
  %0 = fptosi double %x.val to i32
  ret i32 %0
}

; Function Attrs: norecurse nounwind readonly
define i32 @round(double* nocapture readonly %x) local_unnamed_addr #3 {
entry:
  %x.val = load double, double* %x, align 8
  %0 = fadd double %x.val, 0.000000e+00
  %1 = fptosi double %0 to i32
  ret i32 %1
}

; Function Attrs: norecurse nounwind readonly
define i32 @ceil(double* nocapture readonly %x) local_unnamed_addr #3 {
entry:
  %x.val7 = load double, double* %x, align 8
  %0 = fptosi double %x.val7 to i32
  %1 = sitofp i32 %0 to double
  %2 = fsub double %1, %x.val7
  %3 = fcmp olt double %2, 0.000000e+00
  %4 = uitofp i1 %3 to double
  %5 = fmul double %2, %4
  %6 = fmul double %5, 2.000000e+00
  %7 = fsub double %2, %6
  %8 = fcmp ogt double %7, 0.000000e+00
  %9 = zext i1 %8 to i32
  %10 = add i32 %9, %0
  ret i32 %10
}

; Function Attrs: nofree norecurse nounwind
define double @sqrt(double* nocapture readonly %N) local_unnamed_addr #1 {
entry:
  %0 = load double, double* %N, align 8
  %1 = fmul double %0, %0
  %2 = fsub double %0, %1
  %3 = fcmp olt double %2, 0.000000e+00
  %4 = uitofp i1 %3 to double
  %5 = fmul double %2, %4
  %6 = fmul double %5, 2.000000e+00
  %7 = fsub double %2, %6
  %8 = fcmp ogt double %7, 1.000000e-09
  br i1 %8, label %while_loop, label %while_merge

while_loop:                                       ; preds = %entry, %while_loop
  %storemerge14 = phi double [ %11, %while_loop ], [ %0, %entry ]
  %9 = fdiv double %0, %storemerge14
  %10 = fadd double %storemerge14, %9
  %11 = fmul double %10, 5.000000e-01
  %12 = fmul double %11, %11
  %13 = fsub double %0, %12
  %14 = fcmp olt double %13, 0.000000e+00
  %15 = uitofp i1 %14 to double
  %16 = fmul double %13, %15
  %17 = fmul double %16, 2.000000e+00
  %18 = fsub double %13, %17
  %19 = fcmp ogt double %18, 1.000000e-09
  br i1 %19, label %while_loop, label %while_merge

while_merge:                                      ; preds = %while_loop, %entry
  %storemerge.lcssa = phi double [ %0, %entry ], [ %11, %while_loop ]
  ret double %storemerge.lcssa
}

; Function Attrs: norecurse nounwind readnone
define void @n_arr_t(i32* nocapture %N) local_unnamed_addr #2 {
entry:
  ret void
}

; Function Attrs: nofree norecurse nounwind
define i1 @is_prime(i32* %n) local_unnamed_addr #1 {
entry:
  %0 = alloca [11 x i32], align 4
  %.sub = getelementptr inbounds [11 x i32], [11 x i32]* %0, i64 0, i64 0
  store i32 1, i32* %.sub, align 4
  %1 = getelementptr inbounds [11 x i32], [11 x i32]* %0, i64 0, i64 1
  store i32 2, i32* %1, align 4
  %2 = getelementptr inbounds [11 x i32], [11 x i32]* %0, i64 0, i64 2
  store i32 2, i32* %2, align 4
  %3 = getelementptr inbounds [11 x i32], [11 x i32]* %0, i64 0, i64 3
  store i32 4, i32* %3, align 4
  %4 = getelementptr inbounds [11 x i32], [11 x i32]* %0, i64 0, i64 4
  store i32 2, i32* %4, align 4
  %5 = getelementptr inbounds [11 x i32], [11 x i32]* %0, i64 0, i64 5
  store i32 4, i32* %5, align 4
  %6 = getelementptr inbounds [11 x i32], [11 x i32]* %0, i64 0, i64 6
  store i32 2, i32* %6, align 4
  %7 = getelementptr inbounds [11 x i32], [11 x i32]* %0, i64 0, i64 7
  store i32 4, i32* %7, align 4
  %8 = getelementptr inbounds [11 x i32], [11 x i32]* %0, i64 0, i64 8
  store i32 6, i32* %8, align 4
  %9 = getelementptr inbounds [11 x i32], [11 x i32]* %0, i64 0, i64 9
  store i32 2, i32* %9, align 4
  %10 = getelementptr inbounds [11 x i32], [11 x i32]* %0, i64 0, i64 10
  store i32 6, i32* %10, align 4
  %.val2034 = load i32, i32* %n, align 4
  %11 = icmp slt i32 %.val2034, 4
  br i1 %11, label %while_merge, label %while_loop

while_loop:                                       ; preds = %entry, %if_merge
  %.val2041 = phi i32 [ %.val20, %if_merge ], [ %.val2034, %entry ]
  %12 = phi i32 [ %24, %if_merge ], [ 0, %entry ]
  %13 = phi i32 [ %25, %if_merge ], [ 2, %entry ]
  %14 = phi i32 [ %26, %if_merge ], [ 0, %entry ]
  %15 = sdiv i32 %.val2041, %13
  %16 = mul i32 %15, %13
  %.decomposed = sub i32 %.val2041, %16
  %17 = icmp eq i32 %.decomposed, 0
  br i1 %17, label %if_then, label %if_else

if_then:                                          ; preds = %while_loop
  %18 = add i32 %12, 1
  store i32 %15, i32* %n, align 4
  br label %if_merge

if_else:                                          ; preds = %while_loop
  %19 = sext i32 %14 to i64
  %20 = getelementptr [11 x i32], [11 x i32]* %0, i64 0, i64 %19
  %.val15 = load i32, i32* %20, align 4
  %21 = add i32 %.val15, %13
  %22 = icmp eq i32 %14, 10
  %23 = add i32 %14, 1
  %spec.select = select i1 %22, i32 3, i32 %23
  br label %if_merge

if_merge:                                         ; preds = %if_else, %if_then
  %.val20 = phi i32 [ %15, %if_then ], [ %.val2041, %if_else ]
  %24 = phi i32 [ %18, %if_then ], [ %12, %if_else ]
  %25 = phi i32 [ %13, %if_then ], [ %21, %if_else ]
  %26 = phi i32 [ %14, %if_then ], [ %spec.select, %if_else ]
  %27 = mul i32 %25, %25
  %28 = icmp sgt i32 %27, %.val20
  br i1 %28, label %while_merge, label %while_loop

while_merge:                                      ; preds = %if_merge, %entry
  %factorCt.val29 = phi i32 [ 0, %entry ], [ %24, %if_merge ]
  %29 = icmp slt i32 %factorCt.val29, 1
  ret i1 %29
}

; Function Attrs: nounwind
define i32 @main() local_unnamed_addr #4 {
entry:
  %0 = alloca [3 x i8], align 1
  %1 = alloca [5 x i8], align 1
  %2 = alloca [2 x i8], align 1
  %3 = alloca [45 x %Pair], align 8
  %4 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 0, i32 0
  store i1 true, i1* %4, align 8
  %5 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 0, i32 1
  store i32 1, i32* %5, align 4
  %6 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 1, i32 0
  store i1 true, i1* %6, align 8
  %7 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 1, i32 1
  store i32 2, i32* %7, align 4
  %8 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 2, i32 0
  store i1 true, i1* %8, align 8
  %9 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 2, i32 1
  store i32 3, i32* %9, align 4
  %10 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 3, i32 0
  store i1 true, i1* %10, align 8
  %11 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 3, i32 1
  store i32 4, i32* %11, align 4
  %12 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 4, i32 0
  store i1 true, i1* %12, align 8
  %13 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 4, i32 1
  store i32 5, i32* %13, align 4
  %14 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 5, i32 0
  store i1 true, i1* %14, align 8
  %15 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 5, i32 1
  store i32 6, i32* %15, align 4
  %16 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 6, i32 0
  store i1 true, i1* %16, align 8
  %17 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 6, i32 1
  store i32 7, i32* %17, align 4
  %18 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 7, i32 0
  store i1 true, i1* %18, align 8
  %19 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 7, i32 1
  store i32 8, i32* %19, align 4
  %20 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 8, i32 0
  store i1 true, i1* %20, align 8
  %21 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 8, i32 1
  store i32 9, i32* %21, align 4
  %22 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 9, i32 0
  store i1 true, i1* %22, align 8
  %23 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 9, i32 1
  store i32 10, i32* %23, align 4
  %24 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 10, i32 0
  store i1 true, i1* %24, align 8
  %25 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 10, i32 1
  store i32 11, i32* %25, align 4
  %26 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 11, i32 0
  store i1 true, i1* %26, align 8
  %27 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 11, i32 1
  store i32 12, i32* %27, align 4
  %28 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 12, i32 0
  store i1 true, i1* %28, align 8
  %29 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 12, i32 1
  store i32 13, i32* %29, align 4
  %30 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 13, i32 0
  store i1 true, i1* %30, align 8
  %31 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 13, i32 1
  store i32 14, i32* %31, align 4
  %32 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 14, i32 0
  store i1 true, i1* %32, align 8
  %33 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 14, i32 1
  store i32 15, i32* %33, align 4
  %34 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 15, i32 0
  store i1 true, i1* %34, align 8
  %35 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 15, i32 1
  store i32 16, i32* %35, align 4
  %36 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 16, i32 0
  store i1 true, i1* %36, align 8
  %37 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 16, i32 1
  store i32 17, i32* %37, align 4
  %38 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 17, i32 0
  store i1 true, i1* %38, align 8
  %39 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 17, i32 1
  store i32 18, i32* %39, align 4
  %40 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 18, i32 0
  store i1 true, i1* %40, align 8
  %41 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 18, i32 1
  store i32 19, i32* %41, align 4
  %42 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 19, i32 0
  store i1 true, i1* %42, align 8
  %43 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 19, i32 1
  store i32 20, i32* %43, align 4
  %44 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 20, i32 0
  store i1 true, i1* %44, align 8
  %45 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 20, i32 1
  store i32 21, i32* %45, align 4
  %46 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 21, i32 0
  store i1 true, i1* %46, align 8
  %47 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 21, i32 1
  store i32 22, i32* %47, align 4
  %48 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 22, i32 0
  store i1 true, i1* %48, align 8
  %49 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 22, i32 1
  store i32 23, i32* %49, align 4
  %50 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 23, i32 0
  store i1 true, i1* %50, align 8
  %51 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 23, i32 1
  store i32 24, i32* %51, align 4
  %52 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 24, i32 0
  store i1 true, i1* %52, align 8
  %53 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 24, i32 1
  store i32 25, i32* %53, align 4
  %54 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 25, i32 0
  store i1 true, i1* %54, align 8
  %55 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 25, i32 1
  store i32 26, i32* %55, align 4
  %56 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 26, i32 0
  store i1 true, i1* %56, align 8
  %57 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 26, i32 1
  store i32 27, i32* %57, align 4
  %58 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 27, i32 0
  store i1 true, i1* %58, align 8
  %59 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 27, i32 1
  store i32 28, i32* %59, align 4
  %60 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 28, i32 0
  store i1 true, i1* %60, align 8
  %61 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 28, i32 1
  store i32 29, i32* %61, align 4
  %62 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 29, i32 0
  store i1 true, i1* %62, align 8
  %63 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 29, i32 1
  store i32 30, i32* %63, align 4
  %64 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 30, i32 0
  store i1 true, i1* %64, align 8
  %65 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 30, i32 1
  store i32 31, i32* %65, align 4
  %66 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 31, i32 0
  store i1 true, i1* %66, align 8
  %67 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 31, i32 1
  store i32 32, i32* %67, align 4
  %68 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 32, i32 0
  store i1 true, i1* %68, align 8
  %69 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 32, i32 1
  store i32 33, i32* %69, align 4
  %70 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 33, i32 0
  store i1 true, i1* %70, align 8
  %71 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 33, i32 1
  store i32 34, i32* %71, align 4
  %72 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 34, i32 0
  store i1 true, i1* %72, align 8
  %73 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 34, i32 1
  store i32 35, i32* %73, align 4
  %74 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 35, i32 0
  store i1 true, i1* %74, align 8
  %75 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 35, i32 1
  store i32 36, i32* %75, align 4
  %76 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 36, i32 0
  store i1 true, i1* %76, align 8
  %77 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 36, i32 1
  store i32 37, i32* %77, align 4
  %78 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 37, i32 0
  store i1 true, i1* %78, align 8
  %79 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 37, i32 1
  store i32 38, i32* %79, align 4
  %80 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 38, i32 0
  store i1 true, i1* %80, align 8
  %81 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 38, i32 1
  store i32 39, i32* %81, align 4
  %82 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 39, i32 0
  store i1 true, i1* %82, align 8
  %83 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 39, i32 1
  store i32 40, i32* %83, align 4
  %84 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 40, i32 0
  store i1 true, i1* %84, align 8
  %85 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 40, i32 1
  store i32 41, i32* %85, align 4
  %86 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 41, i32 0
  store i1 true, i1* %86, align 8
  %87 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 41, i32 1
  store i32 42, i32* %87, align 4
  %88 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 42, i32 0
  store i1 true, i1* %88, align 8
  %89 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 42, i32 1
  store i32 43, i32* %89, align 4
  %90 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 43, i32 0
  store i1 true, i1* %90, align 8
  %91 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 43, i32 1
  store i32 44, i32* %91, align 4
  %92 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 44, i32 0
  store i1 true, i1* %92, align 8
  %93 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 44, i32 1
  store i32 45, i32* %93, align 4
  %94 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 1, i32 1
  %.val18 = load i32, i32* %94, align 4
  %95 = shl i32 %.val18, 1
  %96 = add i32 %95, -1
  %97 = icmp slt i32 %96, 45
  br i1 %97, label %for_loop10, label %for_merge11

for_loop10:                                       ; preds = %entry, %for_loop10
  %98 = phi i32 [ %101, %for_loop10 ], [ %96, %entry ]
  %99 = sext i32 %98 to i64
  %100 = getelementptr [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 %99, i32 0
  store i1 false, i1* %100, align 8
  %101 = add i32 %.val18, %98
  %102 = icmp slt i32 %101, 45
  br i1 %102, label %for_loop10, label %for_merge11

for_merge11:                                      ; preds = %for_loop10, %entry
  %103 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 2, i32 1
  %.val18.1 = load i32, i32* %103, align 4
  %104 = shl i32 %.val18.1, 1
  %105 = add i32 %104, -1
  %106 = icmp slt i32 %105, 45
  br i1 %106, label %for_loop10.1, label %for_merge11.1

for_loop16:                                       ; preds = %for_merge11.4, %if_merge25
  %.val10 = phi i32 [ 0, %for_merge11.4 ], [ %124, %if_merge25 ]
  %107 = sext i32 %.val10 to i64
  %108 = getelementptr [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 %107, i32 0
  %109 = load i1, i1* %108, align 8
  br i1 %109, label %if_then, label %if_else

if_then:                                          ; preds = %for_loop16
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %159)
  store i8 37, i8* %159, align 1
  store i8 99, i8* %.fca.1.gep.i71, align 1
  store i8 0, i8* %.fca.2.gep.i72, align 1
  %110 = call i32 (i8*, ...) @printf(i8* nonnull %159, i8 32) #4
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %159)
  %111 = getelementptr [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 %107, i32 1
  %.val27 = load i32, i32* %111, align 4
  %112 = icmp slt i32 %.val27, 10
  br i1 %112, label %if_merge19.thread, label %if_merge19

if_merge19.thread:                                ; preds = %if_then
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %159)
  store i8 37, i8* %159, align 1
  store i8 99, i8* %.fca.1.gep.i71, align 1
  store i8 0, i8* %.fca.2.gep.i72, align 1
  %113 = call i32 (i8*, ...) @printf(i8* nonnull %159, i8 32) #4
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %159)
  br label %if_then20

if_merge19:                                       ; preds = %if_then
  %114 = icmp slt i32 %.val27, 100
  br i1 %114, label %if_then20, label %if_merge21

if_then20:                                        ; preds = %if_merge19.thread, %if_merge19
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %159)
  store i8 37, i8* %159, align 1
  store i8 99, i8* %.fca.1.gep.i71, align 1
  store i8 0, i8* %.fca.2.gep.i72, align 1
  %115 = call i32 (i8*, ...) @printf(i8* nonnull %159, i8 32) #4
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %159)
  br label %if_merge21

if_merge21:                                       ; preds = %if_then20, %if_merge19
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %159)
  store i8 37, i8* %159, align 1
  store i8 100, i8* %.fca.1.gep.i71, align 1
  store i8 0, i8* %.fca.2.gep.i72, align 1
  %116 = call i32 (i8*, ...) @printf(i8* nonnull %159, i32 %.val27) #4
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %159)
  %117 = icmp slt i32 %.val27, 1000
  br i1 %117, label %if_then22, label %if_merge23

if_then22:                                        ; preds = %if_merge21
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %159)
  store i8 37, i8* %159, align 1
  store i8 99, i8* %.fca.1.gep.i71, align 1
  store i8 0, i8* %.fca.2.gep.i72, align 1
  %118 = call i32 (i8*, ...) @printf(i8* nonnull %159, i8 32) #4
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %159)
  br label %if_merge23

if_merge23:                                       ; preds = %if_then22, %if_merge21
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %159)
  store i8 37, i8* %159, align 1
  store i8 99, i8* %.fca.1.gep.i71, align 1
  store i8 0, i8* %.fca.2.gep.i72, align 1
  %119 = call i32 (i8*, ...) @printf(i8* nonnull %159, i8 32) #4
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %159)
  br label %if_merge

if_else:                                          ; preds = %for_loop16
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %158)
  store i8 37, i8* %158, align 1
  store i8 46, i8* %.fca.1.gep.i54, align 1
  store i8 42, i8* %.fca.2.gep.i, align 1
  store i8 115, i8* %.fca.3.gep.i, align 1
  store i8 0, i8* %.fca.4.gep.i, align 1
  %120 = call i32 (i8*, ...) @printf(i8* nonnull %158, i32 7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str, i64 0, i64 0)) #4
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %158)
  br label %if_merge

if_merge:                                         ; preds = %if_else, %if_merge23
  %121 = srem i32 %.val10, 7
  %122 = icmp eq i32 %121, 6
  br i1 %122, label %if_then24, label %if_merge25

if_then24:                                        ; preds = %if_merge
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %160)
  store i8 10, i8* %160, align 1
  store i8 0, i8* %.fca.1.gep.i, align 1
  %123 = call i32 (i8*, ...) @printf(i8* nonnull %160) #4
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %160)
  br label %if_merge25

if_merge25:                                       ; preds = %if_then24, %if_merge
  %124 = add i32 %.val10, 1
  %125 = icmp slt i32 %124, 45
  br i1 %125, label %for_loop16, label %for_merge17

for_merge17:                                      ; preds = %if_merge25
  ret i32 0

for_loop10.1:                                     ; preds = %for_merge11, %for_loop10.1
  %126 = phi i32 [ %129, %for_loop10.1 ], [ %105, %for_merge11 ]
  %127 = sext i32 %126 to i64
  %128 = getelementptr [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 %127, i32 0
  store i1 false, i1* %128, align 8
  %129 = add i32 %.val18.1, %126
  %130 = icmp slt i32 %129, 45
  br i1 %130, label %for_loop10.1, label %for_merge11.1

for_merge11.1:                                    ; preds = %for_loop10.1, %for_merge11
  %131 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 3, i32 1
  %.val18.2 = load i32, i32* %131, align 4
  %132 = shl i32 %.val18.2, 1
  %133 = add i32 %132, -1
  %134 = icmp slt i32 %133, 45
  br i1 %134, label %for_loop10.2, label %for_merge11.2

for_loop10.2:                                     ; preds = %for_merge11.1, %for_loop10.2
  %135 = phi i32 [ %138, %for_loop10.2 ], [ %133, %for_merge11.1 ]
  %136 = sext i32 %135 to i64
  %137 = getelementptr [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 %136, i32 0
  store i1 false, i1* %137, align 8
  %138 = add i32 %.val18.2, %135
  %139 = icmp slt i32 %138, 45
  br i1 %139, label %for_loop10.2, label %for_merge11.2

for_merge11.2:                                    ; preds = %for_loop10.2, %for_merge11.1
  %140 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 4, i32 1
  %.val18.3 = load i32, i32* %140, align 4
  %141 = shl i32 %.val18.3, 1
  %142 = add i32 %141, -1
  %143 = icmp slt i32 %142, 45
  br i1 %143, label %for_loop10.3, label %for_merge11.3

for_loop10.3:                                     ; preds = %for_merge11.2, %for_loop10.3
  %144 = phi i32 [ %147, %for_loop10.3 ], [ %142, %for_merge11.2 ]
  %145 = sext i32 %144 to i64
  %146 = getelementptr [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 %145, i32 0
  store i1 false, i1* %146, align 8
  %147 = add i32 %.val18.3, %144
  %148 = icmp slt i32 %147, 45
  br i1 %148, label %for_loop10.3, label %for_merge11.3

for_merge11.3:                                    ; preds = %for_loop10.3, %for_merge11.2
  %149 = getelementptr inbounds [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 5, i32 1
  %.val18.4 = load i32, i32* %149, align 4
  %150 = shl i32 %.val18.4, 1
  %151 = add i32 %150, -1
  %152 = icmp slt i32 %151, 45
  br i1 %152, label %for_loop10.4, label %for_merge11.4

for_loop10.4:                                     ; preds = %for_merge11.3, %for_loop10.4
  %153 = phi i32 [ %156, %for_loop10.4 ], [ %151, %for_merge11.3 ]
  %154 = sext i32 %153 to i64
  %155 = getelementptr [45 x %Pair], [45 x %Pair]* %3, i64 0, i64 %154, i32 0
  store i1 false, i1* %155, align 8
  %156 = add i32 %.val18.4, %153
  %157 = icmp slt i32 %156, 45
  br i1 %157, label %for_loop10.4, label %for_merge11.4

for_merge11.4:                                    ; preds = %for_loop10.4, %for_merge11.3
  %158 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 0
  %.fca.1.gep.i54 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 1
  %.fca.2.gep.i = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 2
  %.fca.3.gep.i = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 3
  %.fca.4.gep.i = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 4
  %159 = getelementptr inbounds [3 x i8], [3 x i8]* %0, i64 0, i64 0
  %.fca.1.gep.i71 = getelementptr inbounds [3 x i8], [3 x i8]* %0, i64 0, i64 1
  %.fca.2.gep.i72 = getelementptr inbounds [3 x i8], [3 x i8]* %0, i64 0, i64 2
  %160 = getelementptr inbounds [2 x i8], [2 x i8]* %2, i64 0, i64 0
  %.fca.1.gep.i = getelementptr inbounds [2 x i8], [2 x i8]* %2, i64 0, i64 1
  br label %for_loop16
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

attributes #0 = { nofree nounwind }
attributes #1 = { nofree norecurse nounwind }
attributes #2 = { norecurse nounwind readnone }
attributes #3 = { norecurse nounwind readonly }
attributes #4 = { nounwind }
attributes #5 = { argmemonly nounwind willreturn }
