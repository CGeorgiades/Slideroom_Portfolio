; ModuleID = 'Module'
source_filename = "Module"

; Function Attrs: alwaysinline
define private double @"="(double** %0, double* %1) #0 {
entry:
  %2 = load double, double* %1, align 8
  %3 = load double*, double** %0, align 8
  store double %2, double* %3, align 8
  %4 = load double, double* %1, align 8
  ret double %4
}

; Function Attrs: alwaysinline
define private i32 @"=.1"(i32** %0, i32* %1) #0 {
entry:
  %2 = load i32, i32* %1, align 4
  %3 = load i32*, i32** %0, align 8
  store i32 %2, i32* %3, align 4
  %4 = load i32, i32* %1, align 4
  ret i32 %4
}

; Function Attrs: alwaysinline
define private i8 @"=.2"(i8** %0, i8* %1) #0 {
entry:
  %2 = load i8, i8* %1, align 1
  %3 = load i8*, i8** %0, align 8
  store i8 %2, i8* %3, align 1
  %4 = load i8, i8* %1, align 1
  ret i8 %4
}

; Function Attrs: alwaysinline
define private i1 @"=.3"(i1** %0, i1* %1) #0 {
entry:
  %2 = load i1, i1* %1, align 1
  %3 = load i1*, i1** %0, align 8
  store i1 %2, i1* %3, align 1
  %4 = load i1, i1* %1, align 1
  ret i1 %4
}

; Function Attrs: alwaysinline
define private double @"+"(double* %0, double* %1) #0 {
entry:
  %2 = load double, double* %0, align 8
  %3 = load double, double* %1, align 8
  %4 = fadd double %2, %3
  ret double %4
}

; Function Attrs: alwaysinline
define private i32 @"+.4"(i32* %0, i32* %1) #0 {
entry:
  %2 = load i32, i32* %0, align 4
  %3 = load i32, i32* %1, align 4
  %4 = add i32 %2, %3
  ret i32 %4
}

; Function Attrs: alwaysinline
define private double @-(double* %0, double* %1) #0 {
entry:
  %2 = load double, double* %0, align 8
  %3 = load double, double* %1, align 8
  %4 = fsub double %2, %3
  ret double %4
}

; Function Attrs: alwaysinline
define private i32 @-.5(i32* %0, i32* %1) #0 {
entry:
  %2 = load i32, i32* %0, align 4
  %3 = load i32, i32* %1, align 4
  %4 = sub i32 %2, %3
  ret i32 %4
}

; Function Attrs: alwaysinline
define private i32 @-.6(i32* %0) #0 {
entry:
  %1 = load i32, i32* %0, align 4
  %2 = sub i32 0, %1
  ret i32 %2
}

; Function Attrs: alwaysinline
define private double @-.7(double* %0) #0 {
entry:
  %1 = load double, double* %0, align 8
  %2 = fneg double %1
  ret double %2
}

; Function Attrs: alwaysinline
define private double @"*"(double* %0, double* %1) #0 {
entry:
  %2 = load double, double* %0, align 8
  %3 = load double, double* %1, align 8
  %4 = fmul double %2, %3
  ret double %4
}

; Function Attrs: alwaysinline
define private i32 @"*.8"(i32* %0, i32* %1) #0 {
entry:
  %2 = load i32, i32* %0, align 4
  %3 = load i32, i32* %1, align 4
  %4 = mul i32 %2, %3
  ret i32 %4
}

; Function Attrs: alwaysinline
define private double @"/"(double* %0, double* %1) #0 {
entry:
  %2 = load double, double* %0, align 8
  %3 = load double, double* %1, align 8
  %4 = fdiv double %2, %3
  ret double %4
}

; Function Attrs: alwaysinline
define private i32 @"/.9"(i32* %0, i32* %1) #0 {
entry:
  %2 = load i32, i32* %0, align 4
  %3 = load i32, i32* %1, align 4
  %4 = sdiv i32 %2, %3
  ret i32 %4
}

; Function Attrs: alwaysinline
define private i32 @"%"(i32* %0, i32* %1) #0 {
entry:
  %2 = load i32, i32* %0, align 4
  %3 = load i32, i32* %1, align 4
  %4 = srem i32 %2, %3
  ret i32 %4
}

; Function Attrs: alwaysinline
define private i1 @"<"(i32* %0, i32* %1) #0 {
entry:
  %2 = load i32, i32* %0, align 4
  %3 = load i32, i32* %1, align 4
  %4 = icmp slt i32 %2, %3
  ret i1 %4
}

; Function Attrs: alwaysinline
define private i1 @"<.10"(double* %0, double* %1) #0 {
entry:
  %2 = load double, double* %0, align 8
  %3 = load double, double* %1, align 8
  %4 = fcmp olt double %2, %3
  ret i1 %4
}

; Function Attrs: alwaysinline
define private i1 @">"(i32* %0, i32* %1) #0 {
entry:
  %2 = load i32, i32* %0, align 4
  %3 = load i32, i32* %1, align 4
  %4 = icmp sgt i32 %2, %3
  ret i1 %4
}

; Function Attrs: alwaysinline
define private i1 @">.11"(double* %0, double* %1) #0 {
entry:
  %2 = load double, double* %0, align 8
  %3 = load double, double* %1, align 8
  %4 = fcmp ogt double %2, %3
  ret i1 %4
}

; Function Attrs: alwaysinline
define private i1 @"<="(i32* %0, i32* %1) #0 {
entry:
  %2 = load i32, i32* %0, align 4
  %3 = load i32, i32* %1, align 4
  %4 = icmp sle i32 %2, %3
  ret i1 %4
}

; Function Attrs: alwaysinline
define private i1 @"<=.12"(double* %0, double* %1) #0 {
entry:
  %2 = load double, double* %0, align 8
  %3 = load double, double* %1, align 8
  %4 = fcmp ole double %2, %3
  ret i1 %4
}

; Function Attrs: alwaysinline
define private i1 @">="(i32* %0, i32* %1) #0 {
entry:
  %2 = load i32, i32* %0, align 4
  %3 = load i32, i32* %1, align 4
  %4 = icmp sge i32 %2, %3
  ret i1 %4
}

; Function Attrs: alwaysinline
define private i1 @">=.13"(double* %0, double* %1) #0 {
entry:
  %2 = load double, double* %0, align 8
  %3 = load double, double* %1, align 8
  %4 = fcmp oge double %2, %3
  ret i1 %4
}

; Function Attrs: alwaysinline
define private i1 @"=="(i32* %0, i32* %1) #0 {
entry:
  %2 = load i32, i32* %0, align 4
  %3 = load i32, i32* %1, align 4
  %4 = icmp eq i32 %2, %3
  ret i1 %4
}

; Function Attrs: alwaysinline
define private i1 @"==.14"(i1* %0, i1* %1) #0 {
entry:
  %2 = load i1, i1* %0, align 1
  %3 = load i1, i1* %1, align 1
  %4 = icmp eq i1 %2, %3
  ret i1 %4
}

; Function Attrs: alwaysinline
define private i1 @"==.15"(double* %0, double* %1) #0 {
entry:
  %2 = load double, double* %0, align 8
  %3 = load double, double* %1, align 8
  %4 = fcmp oeq double %2, %3
  ret i1 %4
}

; Function Attrs: alwaysinline
define private i1 @"!="(i32* %0, i32* %1) #0 {
entry:
  %2 = load i32, i32* %0, align 4
  %3 = load i32, i32* %1, align 4
  %4 = icmp ne i32 %2, %3
  ret i1 %4
}

; Function Attrs: alwaysinline
define private i1 @"!=.16"(i1* %0, i1* %1) #0 {
entry:
  %2 = load i1, i1* %0, align 1
  %3 = load i1, i1* %1, align 1
  %4 = icmp ne i1 %2, %3
  ret i1 %4
}

; Function Attrs: alwaysinline
define private i1 @"!=.17"(double* %0, double* %1) #0 {
entry:
  %2 = load double, double* %0, align 8
  %3 = load double, double* %1, align 8
  %4 = fcmp one double %2, %3
  ret i1 %4
}

; Function Attrs: alwaysinline
define private i1 @"||"(i1* %0, i1* %1) #0 {
entry:
  %2 = load i1, i1* %0, align 1
  %3 = load i1, i1* %1, align 1
  %4 = or i1 %2, %3
  ret i1 %4
}

; Function Attrs: alwaysinline
define private i1 @"&&"(i1* %0, i1* %1) #0 {
entry:
  %2 = load i1, i1* %0, align 1
  %3 = load i1, i1* %1, align 1
  %4 = and i1 %2, %3
  ret i1 %4
}

; Function Attrs: alwaysinline
define private double @"I()"(i32* %0) #0 {
entry:
  %1 = load i32, i32* %0, align 4
  %2 = sitofp i32 %1 to double
  ret double %2
}

; Function Attrs: alwaysinline
define private double @"->"(i32* %0) #0 {
entry:
  %1 = load i32, i32* %0, align 4
  %2 = sitofp i32 %1 to double
  ret double %2
}

; Function Attrs: alwaysinline
define private i32 @"->.18"(double* %0) #0 {
entry:
  %1 = load double, double* %0, align 8
  %2 = fptosi double %1 to i32
  ret i32 %2
}

; Function Attrs: alwaysinline
define private i32 @"->.19"(i1* %0) #0 {
entry:
  %1 = load i1, i1* %0, align 1
  %2 = zext i1 %1 to i32
  ret i32 %2
}

declare i32 @printf(i8*, ...)

define private void @printch(i8* %0) {
entry:
  %1 = alloca [3 x i8], align 1
  store [3 x i8] c"%c\00", [3 x i8]* %1, align 1
  %2 = getelementptr [3 x i8], [3 x i8]* %1, i64 0, i64 0
  %3 = load i8, i8* %0, align 1
  %4 = call i32 (i8*, ...) @printf(i8* %2, i8 %3)
  ret void
}

define private void @println() {
entry:
  %0 = alloca [2 x i8], align 1
  store [2 x i8] c"\0A\00", [2 x i8]* %0, align 1
  %1 = getelementptr [2 x i8], [2 x i8]* %0, i64 0, i64 0
  %2 = call i32 (i8*, ...) @printf(i8* %1)
  ret void
}

define private void @printint(i32* %0) {
entry:
  %1 = alloca [3 x i8], align 1
  store [3 x i8] c"%d\00", [3 x i8]* %1, align 1
  %2 = getelementptr [3 x i8], [3 x i8]* %1, i64 0, i64 0
  %3 = load i32, i32* %0, align 4
  %4 = call i32 (i8*, ...) @printf(i8* %2, i32 %3)
  ret void
}

define private void @printdouble(double* %0) {
entry:
  %1 = alloca [3 x i8], align 1
  store [3 x i8] c"%f\00", [3 x i8]* %1, align 1
  %2 = getelementptr [3 x i8], [3 x i8]* %1, i64 0, i64 0
  %3 = load double, double* %0, align 8
  %4 = call i32 (i8*, ...) @printf(i8* %2, double %3)
  ret void
}

define private void @printstr({ i32, i8* }* %0) {
entry:
  %1 = alloca [5 x i8], align 1
  store [5 x i8] c"%.*s\00", [5 x i8]* %1, align 1
  %2 = getelementptr [5 x i8], [5 x i8]* %1, i64 0, i64 0
  %3 = getelementptr { i32, i8* }, { i32, i8* }* %0, i64 0, i32 0
  %4 = getelementptr { i32, i8* }, { i32, i8* }* %0, i64 0, i32 1
  %5 = load i32, i32* %3, align 4
  %6 = load i8*, i8** %4, align 8
  %7 = call i32 (i8*, ...) @printf(i8* %2, i32 %5, i8* %6)
  ret void
}

declare void @srand(i32*)

declare i32 @rand()

declare i32 @clock()

define i32 @main() {
entry:
  %0 = alloca i32, align 4
  %1 = call i32 @clock()
  store i32 %1, i32* %0, align 4
  call void @srand(i32* %0)
  %x = alloca i32, align 4
  %2 = call i32 @rand()
  store i32 %2, i32* %x, align 4
  %3 = alloca i32*, align 8
  store i32* %x, i32** %3, align 8
  %4 = load i32*, i32** %3, align 8
  call void @printint(i32* %4)
  call void @println()
  %5 = alloca i32, align 4
  store i32 0, i32* %5, align 4
  %6 = load i32, i32* %5, align 4
  ret i32 %6
}

attributes #0 = { alwaysinline }
